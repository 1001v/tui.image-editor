tui.util.defineNamespace("fedoc.content", {});
fedoc.content["component_text.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Text module\n */\n'use strict';\n\nvar Component = require('../interface/component');\nvar consts = require('../consts');\nvar util = require('../util');\n\nvar defaultStyles = {\n    fill: '#000000',\n    left: 0,\n    top: 0\n};\nvar resetStyles = {\n    fill: '#000000',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    textAlign: 'left',\n    textDecoraiton: ''\n};\n\nvar TEXTAREA_CLASSNAME = 'tui-image-eidtor-textarea';\nvar TEXTAREA_STYLES = util.makeStyleText({\n    position: 'absolute',\n    display: 'none',\n    padding: 0,\n    border: '1px dashed red',\n    overflow: 'hidden',\n    resize: 'none',\n    outline: 'none',\n    'border-radius': 0,\n    'background-color': 'transparent',\n    '-webkit-appearance': 'none',\n    'z-index': 99999\n});\nvar EXTRA_PIXEL = {\n    width: 25,\n    height: 10\n};\nvar DBCLICK_TIME = 500;\n\n/**\n * Text\n * @class Text\n * @param {Component} parent - parent component\n * @extends {Component}\n */\nvar Text = tui.util.defineClass(Component, /** @lends Text.prototype */{\n    init: function(parent) {\n        this.setParent(parent);\n\n        /**\n         * Default text style\n         * @type {object}\n         */\n        this._defaultStyles = defaultStyles;\n\n        /**\n         * Selected state\n         * @type {boolean}\n         */\n        this._isSelected = false;\n\n        /**\n         * Selected text object\n         * @type {object}\n         */\n        this._selectedObj = {};\n\n        /**\n         * Editing text object\n         * @type {object}\n         */\n        this._editingObj = {};\n\n        /**\n         * Listeners for fabric event\n         * @type {object}\n         */\n        this._listeners = {};\n\n        /**\n         * Textarea element for editing\n         * @type {HTMLElement}\n         */\n        this._textarea = null;\n\n        /**\n         * Ratio of current canvas\n         * @type {number}\n         */\n        this._ratio = 1;\n\n        /**\n         * Last click time\n         * @type {Date}\n         */\n        this._lastClickTime = (new Date()).getTime();\n    },\n\n    /**\n     * Component name\n     * @type {string}\n     */\n    name: consts.componentNames.TEXT,\n\n    /**\n     * Start input text mode\n     * @param {object} listeners - Callback functions of fabric event\n     */\n    start: function(listeners) {\n        var canvas = this.getCanvas();\n\n        this._listeners = listeners;\n\n        canvas.selection = false;\n        canvas.defaultCursor = 'text';\n\n        this._setEventEachObject(false);\n\n        canvas.on({\n            'mouse:down': this._listeners.mousedown,\n            'object:selected': this._listeners.select,\n            'before:selection:cleared': this._listeners.selectClear,\n            'object:scaling': this._onFabricScaling\n        });\n\n        this._createTextarea();\n\n        this.setCanvasRatio();\n    },\n\n    /**\n     * End input text mode\n     */\n    end: function() {\n        var canvas = this.getCanvas();\n\n        canvas.selection = true;\n        canvas.defaultCursor = 'default';\n\n        this._setEventEachObject(true);\n\n        canvas.deactivateAllWithDispatch(); // action for undo stack\n\n        canvas.off({\n            'mouse:down': this._listeners.mousedown,\n            'object:selected': this._listeners.select,\n            'before:selection:cleared': this._listeners.selectClear,\n            'object:scaling': this._onFabricScaling\n        });\n\n        this._removeTextarea();\n\n        this._listeners = {};\n    },\n\n    /**\n     * Add new text on canvas image\n     * @param {string} text - Initial input text\n     * @param {object} options - Options for generating text\n     *     @param {object} [options.styles] Initial styles\n     *         @param {string} [options.styles.fill] Color\n     *         @param {string} [options.styles.fontFamily] Font type for text\n     *         @param {number} [options.styles.fontSize] Size\n     *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)\n     *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)\n     *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)\n     *     @param {{x: number, y: number}} [options.position] - Initial position\n     */\n    add: function(text, options) {\n        var canvas = this.getCanvas();\n        var styles = this._defaultStyles;\n        var newText;\n\n        this._setInitPos(options.position);\n\n        if (options.styles) {\n            styles = tui.util.extend(options.styles, styles);\n        }\n\n        newText = new fabric.Text(text, styles);\n\n        newText.set(consts.fObjectOptions.SELECTION_STYLE);\n\n        newText.on({\n            mouseup: $.proxy(this._onFabricMouseUp, this)\n        });\n\n        canvas.add(newText);\n\n        if (!canvas.getActiveObject()) {\n            canvas.setActiveObject(newText);\n        }\n    },\n\n    /**\n     * Change text of activate object on canvas image\n     * @param {object} activeObj - Current selected text object\n     * @param {string} text - Changed text\n     */\n    change: function(activeObj, text) {\n        activeObj.set('text', text);\n\n        this.getCanvas().renderAll();\n    },\n\n    /**\n     * Set style\n     * @param {object} activeObj - Current selected text object\n     * @param {object} styleObj - Initial styles\n     *     @param {string} [styleObj.fill] Color\n     *     @param {string} [styleObj.fontFamily] Font type for text\n     *     @param {number} [styleObj.fontSize] Size\n     *     @param {string} [styleObj.fontStyle] Type of inclination (normal / italic)\n     *     @param {string} [styleObj.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *     @param {string} [styleObj.textAlign] Type of text align (left / center / right)\n     *     @param {string} [styleObj.textDecoraiton] Type of line (underline / line-throgh / overline)\n     */\n    setStyle: function(activeObj, styleObj) {\n        tui.util.forEach(styleObj, function(val, key) {\n            if (activeObj[key] === val) {\n                styleObj[key] = resetStyles[key] || '';\n            }\n        }, this);\n\n        activeObj.set(styleObj);\n\n        this.getCanvas().renderAll();\n    },\n\n    /**\n     * Set infos of the current selected object\n     * @param {fabric.Text} obj - Current selected text object\n     * @param {boolean} state - State of selecting\n     */\n    setSelectedInfo: function(obj, state) {\n        this._selectedObj = obj;\n        this._isSelected = state;\n    },\n\n    /**\n     * Whether object is selected or not\n     * @returns {boolean} State of selecting\n     */\n    isSelected: function() {\n        return this._isSelected;\n    },\n\n    /**\n     * Get current selected text object\n     * @returns {fabric.Text} Current selected text object\n     */\n    getSelectedObj: function() {\n        return this._selectedObj;\n    },\n\n    /**\n     * Set ratio value of canvas\n     */\n    setCanvasRatio: function() {\n        var canvasElement = this.getCanvasElement();\n        var cssWidth = canvasElement.getBoundingClientRect().width;\n        var originWidth = canvasElement.width;\n        var ratio = originWidth / cssWidth;\n\n        this._ratio = ratio;\n    },\n\n    /**\n     * Get ratio value of canvas\n     * @returns {number} Ratio value\n     */\n    getCanvasRatio: function() {\n        return this._ratio;\n    },\n\n    /**\n     * Set initial position on canvas image\n     * @param {{x: number, y: number}} [position] - Selected position\n     * @private\n     */\n    _setInitPos: function(position) {\n        position = position || this.getCanvasImage().getCenterPoint();\n\n        this._defaultStyles.left = position.x;\n        this._defaultStyles.top = position.y;\n    },\n\n    /**\n     * Create textarea element on canvas container\n     * @private\n     */\n    _createTextarea: function() {\n        var container = this.getCanvasElement().parentNode;\n        var textarea = document.createElement('textarea');\n\n        textarea.className = TEXTAREA_CLASSNAME;\n        textarea.setAttribute('style', TEXTAREA_STYLES);\n\n        container.appendChild(textarea);\n\n        this._textarea = textarea;\n\n        this._listeners = tui.util.extend(this._listeners, {\n            keyup: tui.util.bind(this._onKeyUp, this),\n            blur: tui.util.bind(this._onBlur, this)\n        });\n\n        fabric.util.addListener(textarea, 'keyup', this._listeners.keyup);\n        fabric.util.addListener(textarea, 'blur', this._listeners.blur);\n    },\n\n    /**\n     * Remove textarea element on canvas container\n     * @private\n     */\n    _removeTextarea: function() {\n        var container = this.getCanvasElement().parentNode;\n        var textarea = container.querySelector('textarea');\n\n        container.removeChild(textarea);\n\n        this._textarea = null;\n\n        fabric.util.removeListener(textarea, 'keyup', this._listeners.keyup);\n        fabric.util.removeListener(textarea, 'blur', this._listeners.blur);\n    },\n\n    /**\n     * Keyup event handler\n     * @private\n     */\n    _onKeyUp: function() {\n        var ratio = this.getCanvasRatio();\n        var textareaStyle = this._textarea.style;\n        var obj = this._editingObj;\n        var originPos = obj.oCoords.tl;\n\n        obj.setText(this._textarea.value);\n\n        textareaStyle.width = ((obj.getWidth() + EXTRA_PIXEL.width) / ratio) + 'px';\n        textareaStyle.height = ((obj.getHeight() + EXTRA_PIXEL.height) / ratio) + 'px';\n\n        textareaStyle.left = (originPos.x / ratio) + 'px';\n        textareaStyle.top = (originPos.y / ratio) + 'px';\n    },\n\n    /**\n     * Blur event handler\n     * @private\n     */\n    _onBlur: function() {\n        this._textarea.style.display = 'none';\n\n        this.getCanvas().add(this._editingObj);\n    },\n\n    /**\n     * Fabric scaling event handler\n     * @param {fabric.Event} fEvent - Current scaling event on selected object\n     * @private\n     */\n    _onFabricScaling: function(fEvent) {\n        var obj = fEvent.target;\n        var scalingSize = obj.getFontSize() * obj.getScaleY();\n\n        obj.setFontSize(scalingSize);\n        obj.setScaleX(1);\n        obj.setScaleY(1);\n    },\n\n    /**\n     * Fabric mouseup event handler\n     * @param {fabric.Event} fEvent - Current mousedown event on selected object\n     * @private\n     */\n    _onFabricMouseUp: function(fEvent) {\n        var newClickTime = (new Date()).getTime();\n\n        if (this._isDoubleClick(newClickTime)) {\n            this._changeToEditingMode(fEvent.target);\n            this._listeners.dbclick(); // fire dbclick event\n        }\n\n        this._lastClickTime = newClickTime;\n    },\n\n    /**\n     * Set event each object\n     * @param {boolean} state - Whether event state is true or false\n     */\n    _setEventEachObject: function(state) {\n        this.getCanvas().forEachObject(function(obj) {\n            if (!obj.isType('text')) {\n                obj.evented = state;\n            }\n        });\n    },\n\n    /**\n     * Get state of firing double click event\n     * @param {Date} newClickTime - Current clicked time\n     * @returns {boolean} Whether double clicked or not\n     * @private\n     */\n    _isDoubleClick: function(newClickTime) {\n        return (newClickTime - this._lastClickTime &lt; DBCLICK_TIME);\n    },\n\n    /**\n     * Change state of text object for editing\n     * @param {fabric.Text} obj - Text object fired event\n     * @private\n     */\n    _changeToEditingMode: function(obj) {\n        var ratio = this.getCanvasRatio();\n        var textareaStyle = this._textarea.style;\n\n        obj.remove();\n\n        this._editingObj = obj;\n        this._textarea.value = obj.getText();\n\n        textareaStyle.display = 'block';\n        textareaStyle.left = (obj.oCoords.tl.x / ratio) + 'px';\n        textareaStyle.top = (obj.oCoords.tl.y / ratio) + 'px';\n        textareaStyle.width = ((obj.getWidth() + EXTRA_PIXEL.width) / ratio) + 'px';\n        textareaStyle.height = (obj.getHeight() / ratio) + 'px';\n        textareaStyle.transform = 'rotate(' + obj.getAngle() + 'deg)';\n\n        textareaStyle['font-size'] = (obj.getFontSize() / ratio) + 'px';\n        textareaStyle['font-family'] = obj.getFontFamily();\n        textareaStyle['font-style'] = obj.getFontStyle();\n        textareaStyle['font-weight'] = obj.getFontWeight();\n        textareaStyle['text-align'] = obj.getTextAlign();\n        textareaStyle['line-height'] = obj.getLineHeight();\n        textareaStyle['transform-origin'] = 'left top';\n\n        this._textarea.focus();\n    }\n});\n\nmodule.exports = Text;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"