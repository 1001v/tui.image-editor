tui.util.defineNamespace("fedoc.content", {});
fedoc.content["imageEditor.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Image-editor application class\n */\n'use strict';\n\nvar Invoker = require('./invoker');\nvar commandFactory = require('./factory/command');\nvar consts = require('./consts');\n\nvar events = consts.eventNames;\nvar commands = consts.commandNames;\nvar compList = consts.componentNames;\nvar states = consts.states;\nvar keyCodes = consts.keyCodes;\n\n/**\n * Image editor\n * @class\n * @param {string|jQuery|HTMLElement} canvasElement - Canvas element or selector\n * @param {object} [option] - Canvas max width &amp; height of css\n *  @param {number} option.cssMaxWidth - Canvas css-max-width\n *  @param {number} option.cssMaxHeight - Canvas css-max-height\n */\nvar ImageEditor = tui.util.defineClass(/** @lends ImageEditor.prototype */{\n    init: function(canvasElement, option) {\n        option = option || {};\n        /**\n         * Invoker\n         * @private\n         * @type {Invoker}\n         */\n        this._invoker = new Invoker();\n\n        /**\n         * Fabric-Canvas instance\n         * @type {fabric.Canvas}\n         * @private\n         */\n        this._canvas = null;\n\n        /**\n         * Editor current state\n         * @private\n         * @type {string}\n         */\n        this._state = states.NORMAL;\n\n        this._setCanvas(canvasElement, option.cssMaxWidth, option.cssMaxHeight);\n        this._attachInvokerEvents();\n        this._attachCanvasEvents();\n        this._attachDomEvents();\n    },\n\n    /**\n     * Attach invoker events\n     * @private\n     */\n    _attachInvokerEvents: function() {\n        var PUSH_UNDO_STACK = events.PUSH_UNDO_STACK;\n        var PUSH_REDO_STACK = events.PUSH_REDO_STACK;\n        var EMPTY_UNDO_STACK = events.EMPTY_UNDO_STACK;\n        var EMPTY_REDO_STACK = events.EMPTY_REDO_STACK;\n\n        /**\n         * @api\n         * @event ImageEditor#pushUndoStack\n         */\n        this._invoker.on(PUSH_UNDO_STACK, $.proxy(this.fire, this, PUSH_UNDO_STACK));\n        /**\n         * @api\n         * @event ImageEditor#pushRedoStack\n         */\n        this._invoker.on(PUSH_REDO_STACK, $.proxy(this.fire, this, PUSH_REDO_STACK));\n        /**\n         * @api\n         * @event ImageEditor#emptyUndoStack\n         */\n        this._invoker.on(EMPTY_UNDO_STACK, $.proxy(this.fire, this, EMPTY_UNDO_STACK));\n        /**\n         * @api\n         * @event ImageEditor#emptyRedoStack\n         */\n        this._invoker.on(EMPTY_REDO_STACK, $.proxy(this.fire, this, EMPTY_REDO_STACK));\n    },\n\n    /**\n     * Attach canvas events\n     * @private\n     */\n    _attachCanvasEvents: function() {\n        this._canvas.on({\n            'path:created': this._onPathCreated,\n            'object:added': $.proxy(function(event) {\n                var obj = event.target;\n                var command;\n\n                if (obj.isType('cropzone')) {\n                    return;\n                }\n\n                if (!tui.util.hasStamp(obj)) {\n                    command = commandFactory.create(commands.ADD_OBJECT, obj);\n                    this._invoker.pushUndoStack(command);\n                    this._invoker.clearRedoStack();\n                }\n\n                /**\n                 * @api\n                 * @event ImageEditor#addObject\n                 * @param {fabric.Object} obj - http://fabricjs.com/docs/fabric.Object.html\n                 * @example\n                 * imageEditor.on('addObject', function(obj) {\n                 *     console.log(obj);\n                 * });\n                 */\n                this.fire(events.ADD_OBJECT, obj);\n            }, this),\n            'object:removed': $.proxy(function(event) {\n                /**\n                 * @api\n                 * @event ImageEditor#removeObject\n                 * @param {fabric.Object} obj - http://fabricjs.com/docs/fabric.Object.html\n                 * @example\n                 * imageEditor.on('removeObject', function(obj) {\n                 *     console.log(obj);\n                 * });\n                 */\n                this.fire(events.REMOVE_OBJECT, event.target);\n            }, this),\n            'object:moving': $.proxy(function(event) {\n                this._invoker.clearRedoStack();\n\n                /**\n                 * @api\n                 * @event ImageEditor#adjustObject\n                 * @param {fabric.Object} obj - http://fabricjs.com/docs/fabric.Object.html\n                 * @param {string} Action type (move / scale)\n                 * @example\n                 * imageEditor.on('adjustObject', function(obj, type) {\n                 *     console.log(obj);\n                 *     console.log(type);\n                 * });\n                 */\n                this.fire(events.ADJUST_OBJECT, event.target, 'move');\n            }, this),\n            'object:scaling': $.proxy(function(event) {\n                this._invoker.clearRedoStack();\n\n                /**\n                 * @event ImageEditor#adjustObject\n                 * @param {fabric.Object} obj - http://fabricjs.com/docs/fabric.Object.html\n                 * @param {string} Action type (scale / scale)\n                 * @example\n                 * imageEditor.on('adjustObject', function(obj, type) {\n                 *     console.log(obj);\n                 *     console.log(type);\n                 * });\n                 */\n                this.fire(events.ADJUST_OBJECT, event.target, 'scale');\n            }, this)\n        });\n    },\n\n    /**\n     * Attach dom events\n     * @private\n     */\n    _attachDomEvents: function() {\n        fabric.util.addListener(document, 'keydown', $.proxy(this._onKeyDown, this));\n    },\n\n    /**\n     * Keydown event handler\n     * @param {KeyboardEvent} e - Event object\n     * @private\n     */\n    _onKeyDown: function(e) {\n        if ((e.ctrlKey || e.metaKey) &amp;&amp; e.keyCode === keyCodes.Z) {\n            this.undo();\n        }\n\n        if ((e.ctrlKey || e.metaKey) &amp;&amp; e.keyCode === keyCodes.Y) {\n            this.redo();\n        }\n    },\n\n    /**\n     * EventListener - \"path:created\"\n     *  - Events:: \"object:added\" -> \"path:created\"\n     * @param {{path: fabric.Path}} obj - Path object\n     * @private\n     */\n    _onPathCreated: function(obj) {\n        obj.path.set(consts.fObjectOptions.SELECTION_STYLE);\n    },\n\n    /**\n     * Set canvas element\n     * @param {string|jQuery|HTMLElement} canvasElement - Canvas element or selector\n     * @param {number} cssMaxWidth - Canvas css max width\n     * @param {number} cssMaxHeight - Canvas css max height\n     * @private\n     */\n    _setCanvas: function(canvasElement, cssMaxWidth, cssMaxHeight) {\n        var mainComponent;\n\n        mainComponent = this._getMainComponent();\n        mainComponent.setCanvasElement(canvasElement);\n        mainComponent.setCssMaxDimension({\n            width: cssMaxWidth,\n            height: cssMaxHeight\n        });\n        this._canvas = mainComponent.getCanvas();\n    },\n\n    /**\n     * Returns main component\n     * @returns {Component} Main component\n     * @private\n     */\n    _getMainComponent: function() {\n        return this._getComponent(compList.MAIN);\n    },\n\n    /**\n     * Get component\n     * @param {string} name - Component name\n     * @returns {Component}\n     * @private\n     */\n    _getComponent: function(name) {\n        return this._invoker.getComponent(name);\n    },\n\n    /**\n     * Get current state\n     * @api\n     * @returns {string}\n     * @example\n     * // Image editor states\n     * //\n     * //    NORMAL: 'NORMAL'\n     * //    CROP: 'CROP'\n     * //    FREE_DRAWING: 'FREE_DRAWING'\n     * //    TEXT: 'TEXT'\n     * //\n     * if (imageEditor.getCurrentState() === 'FREE_DRAWING') {\n     *     imageEditor.endFreeDrawing();\n     * }\n     */\n    getCurrentState: function() {\n        return this._state;\n    },\n\n    /**\n     * Clear all objects\n     * @api\n     * @example\n     * imageEditor.clearObjects();\n     */\n    clearObjects: function() {\n        var command = commandFactory.create(commands.CLEAR_OBJECTS);\n        var callback = $.proxy(this.fire, this, events.CLEAR_OBJECTS);\n\n        /**\n         * @api\n         * @event ImageEditor#clearObjects\n         */\n        command.setExecuteCallback(callback);\n        this.execute(command);\n    },\n\n    /**\n     * End current action &amp; Deactivate\n     * @api\n     * @example\n     * imageEditor.startFreeDrawing();\n     * imageEidtor.endAll(); // === imageEidtor.endFreeDrawing();\n     *\n     * imageEditor.startCropping();\n     * imageEditor.endAll(); // === imageEidtor.endCropping();\n     */\n    endAll: function() {\n        this.endTextMode();\n        this.endFreeDrawing();\n        this.endLineDrawing();\n        this.endCropping();\n        this.deactivateAll();\n        this._state = states.NORMAL;\n    },\n\n    /**\n     * Deactivate all objects\n     * @api\n     * @example\n     * imageEditor.deactivateAll();\n     */\n    deactivateAll: function() {\n        this._canvas.deactivateAll();\n        this._canvas.renderAll();\n    },\n\n    /**\n     * Invoke command\n     * @param {Command} command - Command\n     */\n    execute: function(command) {\n        this.endAll();\n        this._invoker.invoke(command);\n    },\n\n    /**\n     * Undo\n     * @api\n     * @example\n     * imageEditor.undo();\n     */\n    undo: function() {\n        this.endAll();\n        this._invoker.undo();\n    },\n\n    /**\n     * Redo\n     * @api\n     * @example\n     * imageEditor.redo();\n     */\n    redo: function() {\n        this.endAll();\n        this._invoker.redo();\n    },\n\n    /**\n     * Load image from file\n     * @api\n     * @param {File} imgFile - Image file\n     * @param {string} [imageName] - imageName\n     * @example\n     * imageEditor.loadImageFromFile(file);\n     */\n    loadImageFromFile: function(imgFile, imageName) {\n        if (!imgFile) {\n            return;\n        }\n\n        this.loadImageFromURL(\n            URL.createObjectURL(imgFile),\n            imageName || imgFile.name\n        );\n    },\n\n    /**\n     * Load image from url\n     * @api\n     * @param {string} url - File url\n     * @param {string} imageName - imageName\n     * @example\n     * imageEditor.loadImageFromURL('http://url/testImage.png', 'lena')\n     */\n    loadImageFromURL: function(url, imageName) {\n        var self = this;\n        var callback, command;\n\n        if (!imageName || !url) {\n            return;\n        }\n\n        callback = $.proxy(this._callbackAfterImageLoading, this);\n        command = commandFactory.create(commands.LOAD_IMAGE, imageName, url);\n        command.setExecuteCallback(callback)\n            .setUndoCallback(function(oImage) {\n                if (oImage) {\n                    callback(oImage);\n                } else {\n                    /**\n                     * @api\n                     * @event ImageEditor#clearImage\n                     */\n                    self.fire(events.CLEAR_IMAGE);\n                }\n            });\n        this.execute(command);\n    },\n\n    /**\n     * Callback after image loading\n     * @param {?fabric.Image} oImage - Image instance\n     * @private\n     */\n    _callbackAfterImageLoading: function(oImage) {\n        var mainComponent = this._getMainComponent();\n        var $canvasElement = $(mainComponent.getCanvasElement());\n\n        /**\n         * @api\n         * @event ImageEditor#loadImage\n         * @param {object} dimension\n         *  @param {number} dimension.originalWidth - original image width\n         *  @param {number} dimension.originalHeight - original image height\n         *  @param {number} dimension.currentWidth - current width (css)\n         *  @param {number} dimension.current - current height (css)\n         * @example\n         * imageEditor.on('loadImage', function(dimension) {\n         *     console.log(dimension.originalWidth);\n         *     console.log(dimension.originalHeight);\n         *     console.log(dimension.currentWidth);\n         *     console.log(dimension.currentHeight);\n         * });\n         */\n        this.fire(events.LOAD_IMAGE, {\n            originalWidth: oImage.width,\n            originalHeight: oImage.height,\n            currentWidth: $canvasElement.width(),\n            currentHeight: $canvasElement.height()\n        });\n    },\n\n    /**\n     * Add image object on canvas\n     * @param {string} imgUrl - Image url to make object\n     * @api\n     * @example\n     * imageEditor.addImageObject('path/fileName.jpg');\n     */\n    addImageObject: function(imgUrl) {\n        if (!imgUrl) {\n            return;\n        }\n\n        fabric.Image.fromURL(imgUrl,\n            $.proxy(this._callbackAfterLoadingImageObject, this),\n            {\n                crossOrigin: 'Anonymous'\n            }\n        );\n    },\n\n    /**\n     * Callback function after loading image\n     * @param {fabric.Image} obj - Fabric image object\n     * @private\n     */\n    _callbackAfterLoadingImageObject: function(obj) {\n        var mainComp = this._getMainComponent();\n        var centerPos = mainComp.getCanvasImage().getCenterPoint();\n\n        obj.set(consts.fObjectOptions.SELECTION_STYLE);\n        obj.set({\n            left: centerPos.x,\n            top: centerPos.y,\n            crossOrigin: 'anonymous'\n        });\n\n        this._canvas.add(obj).setActiveObject(obj);\n    },\n\n    /**\n     * Start cropping\n     * @api\n     * @example\n     * imageEditor.startCropping();\n     */\n    startCropping: function() {\n        var cropper;\n\n        if (this.getCurrentState() === states.CROP) {\n            return;\n        }\n\n        this.endAll();\n        this._state = states.CROP;\n        cropper = this._getComponent(compList.CROPPER);\n        cropper.start();\n        /**\n         * @api\n         * @event ImageEditor#startCropping\n         */\n        this.fire(events.START_CROPPING);\n    },\n\n    /**\n     * Apply cropping\n     * @api\n     * @param {boolean} [isApplying] - Whether the cropping is applied or canceled\n     * @example\n     * imageEditor.startCropping();\n     * imageEditor.endCropping(false); // cancel cropping\n     *\n     * imageEditor.startCropping();\n     * imageEditor.endCropping(true); // apply cropping\n     */\n    endCropping: function(isApplying) {\n        var cropper, data;\n\n        if (this.getCurrentState() !== states.CROP) {\n            return;\n        }\n\n        cropper = this._getComponent(compList.CROPPER);\n        this._state = states.NORMAL;\n        data = cropper.end(isApplying);\n        /**\n         * @api\n         * @event ImageEditor#endCropping\n         */\n        this.fire(events.END_CROPPING);\n        if (data) {\n            this.loadImageFromURL(data.url, data.imageName);\n        }\n    },\n\n    /**\n     * Flip\n     * @param {string} type - 'flipX' or 'flipY' or 'reset'\n     * @private\n     */\n    _flip: function(type) {\n        var callback = $.proxy(this.fire, this, events.FLIP_IMAGE);\n        var command = commandFactory.create(commands.FLIP_IMAGE, type);\n\n        /**\n         * @api\n         * @event ImageEditor#flipImage\n         * @param {object} flipSetting\n         *  @param {boolean} flipSetting.flipX - image.flipX\n         *  @param {boolean} flipSetting.flipY - image.flipY\n         * @param {number} angle - image.angle\n         * @example\n         * imageEditor.on('flipImage', function(flipSetting, angle) {\n         *     console.log('flipX: ', setting.flipX);\n         *     console.log('flipY: ', setting.flipY);\n         *     console.log('angle: ', angle);\n         * });\n         */\n        command.setExecuteCallback(callback)\n            .setUndoCallback(callback);\n        this.execute(command);\n    },\n\n    /**\n     * Flip x\n     * @api\n     * @example\n     * imageEditor.flipX();\n     */\n    flipX: function() {\n        this._flip('flipX');\n    },\n\n    /**\n     * Flip y\n     * @api\n     * @example\n     * imageEditor.flipY();\n     */\n    flipY: function() {\n        this._flip('flipY');\n    },\n\n    /**\n     * Reset flip\n     * @api\n     * @example\n     * imageEditor.resetFlip();\n     */\n    resetFlip: function() {\n        this._flip('reset');\n    },\n\n    /**\n     * @param {string} type - 'rotate' or 'setAngle'\n     * @param {number} angle - angle value (degree)\n     * @private\n     */\n    _rotate: function(type, angle) {\n        var callback = $.proxy(this.fire, this, events.ROTATE_IMAGE);\n        var command = commandFactory.create(commands.ROTATE_IMAGE, type, angle);\n\n        /**\n         * @api\n         * @event ImageEditor#rotateImage\n         * @param {number} currentAngle - image.angle\n         * @example\n         * imageEditor.on('rotateImage', function(angle) {\n         *     console.log('angle: ', angle);\n         * });\n         */\n        command.setExecuteCallback(callback)\n            .setUndoCallback(callback);\n        this.execute(command);\n    },\n\n    /**\n     * Rotate image\n     * @api\n     * @param {number} angle - Additional angle to rotate image\n     * @example\n     * imageEditor.setAngle(10); // angle = 10\n     * imageEditor.rotate(10); // angle = 20\n     * imageEidtor.setAngle(5); // angle = 5\n     * imageEidtor.rotate(-95); // angle = -90\n     */\n    rotate: function(angle) {\n        this._rotate('rotate', angle);\n    },\n\n    /**\n     * Set angle\n     * @api\n     * @param {number} angle - Angle of image\n     * @example\n     * imageEditor.setAngle(10); // angle = 10\n     * imageEditor.rotate(10); // angle = 20\n     * imageEidtor.setAngle(5); // angle = 5\n     * imageEidtor.rotate(50); // angle = 55\n     * imageEidtor.setAngle(-40); // angle = -40\n     */\n    setAngle: function(angle) {\n        this._rotate('setAngle', angle);\n    },\n\n    /**\n     * Start free-drawing mode\n     * @param {{width: number, color: string}} [setting] - Brush width &amp; color\n     * @api\n     * @example\n     * imageEditor.startFreeDrawing();\n     * imageEditor.endFreeDrawing();\n     * imageEidtor.startFreeDrawing({\n     *     width: 12,\n     *     color: 'rgba(0, 0, 0, 0.5)'\n     * });\n     */\n    startFreeDrawing: function(setting) {\n        if (this.getCurrentState() === states.FREE_DRAWING) {\n            return;\n        }\n\n        this.endAll();\n        this._getComponent(compList.FREE_DRAWING).start(setting);\n        this._state = states.FREE_DRAWING;\n\n        /**\n         * @api\n         * @event ImageEditor#startFreeDrawing\n         */\n        this.fire(events.START_FREE_DRAWING);\n    },\n\n    /**\n     * Set drawing brush\n     * @param {{width: number, color: string}} setting - Brush width &amp; color\n     * @api\n     * @example\n     * imageEditor.startFreeDrawing();\n     * imageEditor.setBrush({\n     *     width: 12,\n     *     color: 'rgba(0, 0, 0, 0.5)'\n     * });\n     * imageEditor.setBrush({\n     *     width: 8,\n     *     color: 'FFFFFF'\n     * });\n     */\n    setBrush: function(setting) {\n        var state = this._state;\n        var compName;\n\n        switch (state) {\n            case states.LINE:\n                compName = compList.LINE;\n                break;\n            default:\n                compName = compList.FREE_DRAWING;\n        }\n\n        this._getComponent(compName).setBrush(setting);\n    },\n\n    /**\n     * End free-drawing mode\n     * @api\n     * @example\n     * imageEditor.startFreeDrawing();\n     * imageEditor.endFreeDrawing();\n     */\n    endFreeDrawing: function() {\n        if (this.getCurrentState() !== states.FREE_DRAWING) {\n            return;\n        }\n        this._getComponent(compList.FREE_DRAWING).end();\n        this._state = states.NORMAL;\n\n        /**\n         * @api\n         * @event ImageEditor#endFreeDrawing\n         */\n        this.fire(events.END_FREE_DRAWING);\n    },\n\n    /**\n     * Start line-drawing mode\n     * @param {{width: number, color: string}} [setting] - Brush width &amp; color\n     * @api\n     * @example\n     * imageEditor.startLineDrawing();\n     * imageEditor.endLineDrawing();\n     * imageEidtor.startLineDrawing({\n     *     width: 12,\n     *     color: 'rgba(0, 0, 0, 0.5)'\n     * });\n     */\n    startLineDrawing: function(setting) {\n        if (this.getCurrentState() === states.LINE) {\n            return;\n        }\n\n        this.endAll();\n        this._getComponent(compList.LINE).start(setting);\n        this._state = states.LINE;\n\n        /**\n         * @api\n         * @event ImageEditor#startLineDrawing\n         */\n        this.fire(events.START_LINE_DRAWING);\n    },\n\n    /**\n     * End line-drawing mode\n     * @api\n     * @example\n     * imageEditor.startLineDrawing();\n     * imageEditor.endLineDrawing();\n     */\n    endLineDrawing: function() {\n        if (this.getCurrentState() !== states.LINE) {\n            return;\n        }\n        this._getComponent(compList.LINE).end();\n        this._state = states.NORMAL;\n\n        /**\n         * @api\n         * @event ImageEditor#endLineDrawing\n         */\n        this.fire(events.END_LINE_DRAWING);\n    },\n\n    /**\n     * Start text input mode\n     * @api\n     * @example\n     * imageEditor.endTextMode();\n     * imageEditor.startTextMode();\n     */\n    startTextMode: function() {\n        this.endAll();\n\n        if (this.getCurrentState() === states.TEXT) {\n            return;\n        }\n\n        this._state = states.TEXT;\n\n        this._listener = $.proxy(this._onFabricMouseDown, this);\n\n        this._canvas.forEachObject(function(obj) {\n            if (!obj.isType('text')) {\n                obj.evented = false;\n            }\n        });\n\n        this._canvas.selection = false;\n        this._canvas.defaultCursor = 'text';\n        this._canvas.on('mouse:down', this._listener);\n    },\n\n    /**\n     * Add text on image\n     * @api\n     * @param {string} text - Initial input text\n     * @param {object} [options] Options for generating text\n     *     @param {object} [options.styles] Initial styles\n     *         @param {string} [options.styles.fill] Color\n     *         @param {string} [options.styles.fontFamily] Font type for text\n     *         @param {number} [options.styles.fontSize] Size\n     *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)\n     *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)\n     *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)\n     *     @param {{x: number, y: number}} [options.position] - Initial position\n     * @example\n     * imageEditor.addText();\n     * imageEditor.addText('init text', {\n     *     styles: {\n     *     fill: '#000',\n     *         fontSize: '20',\n     *         fontWeight: 'bold'\n     *     },\n     *     position: {\n     *         x: 10,\n     *         y: 10\n     *     }\n     * });\n     */\n    addText: function(text, options) {\n        if (this.getCurrentState() !== states.TEXT) {\n            this._state = states.TEXT;\n        }\n\n        this._getComponent(compList.TEXT).add(text || '', options || {});\n    },\n\n    /**\n     * Change contents of selected text object on image\n     * @api\n     * @param {string} text - Changing text\n     * @example\n     * imageEditor.changeText('change text');\n     */\n    changeText: function(text) {\n        var activeObj = this._canvas.getActiveObject();\n\n        if (this.getCurrentState() !== states.TEXT ||\n            !activeObj) {\n            return;\n        }\n\n        this._getComponent(compList.TEXT).change(activeObj, text);\n    },\n\n    /**\n     * Set style\n     * @api\n     * @param {object} styleObj - Initial styles\n     *     @param {string} [styleObj.fill] Color\n     *     @param {string} [styleObj.fontFamily] Font type for text\n     *     @param {number} [styleObj.fontSize] Size\n     *     @param {string} [styleObj.fontStyle] Type of inclination (normal / italic)\n     *     @param {string} [styleObj.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *     @param {string} [styleObj.textAlign] Type of text align (left / center / right)\n     *     @param {string} [styleObj.textDecoraiton] Type of line (underline / line-throgh / overline)\n     * @example\n     * imageEditor.changeTextStyle({\n     *     fontStyle: 'italic'\n     * });\n     */\n    changeTextStyle: function(styleObj) {\n        var activeObj = this._canvas.getActiveObject();\n\n        if (this.getCurrentState() !== states.TEXT ||\n            !activeObj) {\n            return;\n        }\n\n        this._getComponent(compList.TEXT).setStyle(activeObj, styleObj);\n    },\n\n    /**\n     * End text input mode\n     * @api\n     * @example\n     * imageEditor.startTextMode();\n     * imageEditor.endTextMode();\n     */\n    endTextMode: function() {\n        if (this.getCurrentState() === states.TEXT) {\n            this._state = states.NORMAL;\n        }\n\n        this._canvas.forEachObject(function(obj) {\n            if (obj.isType('text') &amp;&amp; obj.text === '') {\n                obj.remove();\n            } else {\n                obj.evented = true;\n            }\n        });\n\n        this._canvas.selection = true;\n        this._canvas.defaultCursor = 'default';\n        this._canvas.off('mouse:down', this._listener);\n    },\n\n     /**\n      * Mousedown event handler\n      * @param {fabric.Event} event - Current mousedown event object\n      */\n    _onFabricMouseDown: function(event) {\n        var obj = event.target;\n        var e = event.e;\n        var originPointer = this._canvas.getPointer(e);\n\n        if (obj &amp;&amp; !obj.isType('text')) {\n            return;\n        }\n\n        /**\n         * @api\n         * @event ImageEditor#activateText\n         * @param {object} options\n         *     @param {boolean} options.type - Type of text object (new / select)\n         *     @param {string} options.text - Current text\n         *     @param {object} options.styles - Current styles\n         *         @param {string} options.styles.fill - Color\n         *         @param {string} options.styles.fontFamily - Font type for text\n         *         @param {number} options.styles.fontSize - Size\n         *         @param {string} options.styles.fontStyle - Type of inclination (normal / italic)\n         *         @param {string} options.styles.fontWeight - Type of thicker or thinner looking (normal / bold)\n         *         @param {string} options.styles.textAlign - Type of text align (left / center / right)\n         *         @param {string} options.styles.textDecoraiton - Type of line (underline / line-throgh / overline)\n         *     @param {{x: number, y: number}} options.originPosition - Current position on origin canvas\n         *     @param {{x: number, y: number}} options.clientPosition - Current position on client area\n         * @example\n         * imageEditor.on('activateText', function(obj) {\n         *     console.log('text object type: ' + obj.type);\n         *     console.log('text contents: ' + obj.text);\n         *     console.log('text styles: ' + obj.styles);\n         *     console.log('text position on canvas: ' + obj.originPosition);\n         *     console.log('text position on brwoser: ' + obj.clientPosition);\n         * });\n         */\n        this.fire(events.ACTIVATE_TEXT, {\n            type: obj ? 'select' : 'new',\n            text: obj ? obj.text : '',\n            styles: obj ? {\n                fill: obj.fill,\n                fontFamily: obj.fontFamily,\n                fontSize: obj.fontSize,\n                fontStyle: obj.fontStyle,\n                textAlign: obj.textAlign,\n                textDecoration: obj.textDecoration\n            } : {},\n            originPosition: {\n                x: originPointer.x,\n                y: originPointer.y\n            },\n            clientPosition: {\n                x: e.clientX,\n                y: e.clientY\n            }\n        });\n    },\n\n    /**\n     * Register custom icons\n     * @api\n     * @param {{iconType: string, pathValue: string}} infos - Infos to register icons\n     * @example\n     * imageEditor.registerIcons({\n     *     customIcon: 'M 0 0 L 20 20 L 10 10 Z',\n     *     customArrow: 'M 60 0 L 120 60 H 90 L 75 45 V 180 H 45 V 45 L 30 60 H 0 Z'\n     * });\n     */\n    registerIcons: function(infos) {\n        this._getComponent(compList.ICON).registerPaths(infos);\n    },\n\n    /**\n     * Add icon on canvas\n     * @api\n     * @param {string} type - Icon type (arrow / cancel)\n     * @example\n     * imageEditor.addIcon('arrow');\n     */\n    addIcon: function(type) {\n        this._getComponent(compList.ICON).add(type);\n    },\n\n    /**\n     * Change icon color\n     * @api\n     * @param {string} color - Color for icon\n     * @example\n     * imageEditor.changeIconColor('#000000');\n     */\n    changeIconColor: function(color) {\n        var activeObj = this._canvas.getActiveObject();\n\n        this._getComponent(compList.ICON).setColor(color, activeObj);\n    },\n\n    /**\n     * Remove active object or group\n     * @api\n     * @example\n     * imageEditor.removeActiveObject();\n     */\n    removeActiveObject: function() {\n        var canvas = this._canvas;\n        var target = canvas.getActiveObject() || canvas.getActiveGroup();\n        var command = commandFactory.create(commands.REMOVE_OBJECT, target);\n        this.execute(command);\n    },\n\n    /**\n     * Apply filter on canvas image\n     * @api\n     * @param {string} type - Filter type (current filter type is only 'mask')\n     * @param {options} options - Options to apply filter\n     * @example\n     * imageEditor.applyFilter('mask');\n     * imageEditor.applyFilter('mask', {\n     *     mask: fabricImgObj\n     * });\n     */\n    applyFilter: function(type, options) {\n        var command, callback, activeObj;\n\n        if (type === 'mask' &amp;&amp; !options) {\n            activeObj = this._canvas.getActiveObject();\n\n            if (!(activeObj &amp;&amp; activeObj.isType('image'))) {\n                return;\n            }\n\n            options = {\n                mask: activeObj\n            };\n        }\n\n        callback = $.proxy(this.fire, this, events.APPLY_FILTER);\n        command = commandFactory.create(commands.APPLY_FILTER, type, options);\n\n        /**\n         * @api\n         * @event ImageEditor#applyFilter\n         * @param {string} filterType - Applied filter\n         * @param {string} actType - Action type (add / remove)\n         * @example\n         * imageEditor.on('applyFilter', function(filterType, actType) {\n         *     console.log('filterType: ', filterType);\n         *     console.log('actType: ', actType);\n         * });\n         */\n        command.setExecuteCallback(callback)\n            .setUndoCallback(callback);\n\n        this.execute(command);\n    },\n\n    /**\n     * Get data url\n     * @api\n     * @param {string} type - A DOMString indicating the image format. The default type is image/png.\n     * @returns {string} A DOMString containing the requested data URI\n     * @example\n     * imgEl.src = imageEditor.toDataURL();\n     */\n    toDataURL: function(type) {\n        return this._getMainComponent().toDataURL(type);\n    },\n\n    /**\n     * Get image name\n     * @api\n     * @returns {string} image name\n     * @example\n     * console.log(imageEditor.getImageName());\n     */\n    getImageName: function() {\n        return this._getMainComponent().getImageName();\n    },\n\n    /**\n     * Clear undoStack\n     * @api\n     * @example\n     * imageEditor.clearUndoStack();\n     */\n    clearUndoStack: function() {\n        this._invoker.clearUndoStack();\n    },\n\n    /**\n     * Clear redoStack\n     * @api\n     * @example\n     * imageEditor.clearRedoStack();\n     */\n    clearRedoStack: function() {\n        this._invoker.clearRedoStack();\n    }\n});\n\ntui.util.CustomEvents.mixin(ImageEditor);\nmodule.exports = ImageEditor;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"