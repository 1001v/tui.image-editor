tui.util.defineNamespace("fedoc.content", {});
fedoc.content["extension_mask.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Mask extending fabric.Image.filters.Mask\n */\n'use strict';\n\n/**\n * Mask object\n * @class Mask\n * @extends {fabric.Image.filters.Mask}\n */\nvar Mask = fabric.util.createClass(fabric.Image.filters.Mask, /** @lends Mask.prototype */{\n    /**\n     * Apply filter to canvas element\n     * @param {object} canvasEl - Canvas element to apply filter\n     * @override\n     */\n    applyTo: function(canvasEl) {\n        var maskCanvasEl, ctx, maskCtx, imageData;\n        var width, height;\n\n        if (!this.mask) {\n            return;\n        }\n\n        width = canvasEl.width;\n        height = canvasEl.height;\n\n        maskCanvasEl = this._createCanvasOfMask(width, height);\n\n        ctx = canvasEl.getContext('2d');\n        maskCtx = maskCanvasEl.getContext('2d');\n\n        imageData = ctx.getImageData(0, 0, width, height);\n\n        this._drawMask(maskCtx);\n        this._mapData(maskCtx, imageData, width, height);\n\n        ctx.putImageData(imageData, 0, 0);\n    },\n\n    /**\n     * Create canvas of mask image\n     * @param {number} width - Width of main canvas\n     * @param {number} height - Height of main canvas\n     * @returns {HTMLElement} Canvas element\n     * @private\n     */\n    _createCanvasOfMask: function(width, height) {\n        var maskCanvasEl = fabric.util.createCanvasElement();\n\n        maskCanvasEl.width = width;\n        maskCanvasEl.height = height;\n\n        return maskCanvasEl;\n    },\n\n    /**\n     * Draw mask image on canvas element\n     * @param {object} maskCtx - Context of mask canvas\n     * @private\n     */\n    _drawMask: function(maskCtx) {\n        var width, height, left, top;\n        var mask = this.mask;\n\n        width = mask.getWidth();\n        height = mask.getHeight();\n        left = mask.getLeft() - (width / 2);\n        top = mask.getTop() - (height / 2);\n\n        maskCtx.drawImage(mask.getElement(), left, top, width, height);\n    },\n\n    /**\n     * Map mask image data to source image data\n     * @param {object} maskCtx - Context of mask canvas\n     * @param {object} imageData - Data of source image\n     * @param {number} width - Width of main canvas\n     * @param {number} height - Height of main canvas\n     * @private\n     */\n    _mapData: function(maskCtx, imageData, width, height) {\n        var sourceData = imageData.data;\n        var maskData = maskCtx.getImageData(0, 0, width, height).data;\n        var channel = this.channel;\n        var i = 0;\n        var len = imageData.width * imageData.height * 4;\n\n        for (; i &lt; len; i += 4) {\n            sourceData[i + 3] = maskData[i + channel]; // adjust value of alpha data\n        }\n    }\n});\n\nmodule.exports = Mask;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"