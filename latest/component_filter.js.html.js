tui.util.defineNamespace("fedoc.content", {});
fedoc.content["component_filter.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Add filter module\n */\n'use strict';\n\nvar Component = require('../interface/component');\nvar Mask = require('../extension/mask');\nvar consts = require('../consts');\n\n/**\n * Filter\n * @class Filter\n * @param {Component} parent - parent component\n * @extends {Component}\n */\nvar Filter = tui.util.defineClass(Component, /** @lends Filter.prototype */{\n    init: function(parent) {\n        this.setParent(parent);\n    },\n\n    /**\n     * Component name\n     * @type {string}\n     */\n    name: consts.componentNames.FILTER,\n\n    /**\n     * Add filter to source image (a specific filter is added on fabric.js)\n     * @param {string} type - Filter type\n     * @param {object} [options] - Options of filter\n     * @returns {jQuery.Deferred}\n     */\n    add: function(type, options) {\n        var jqDefer = $.Deferred();\n        var filter = this._createFilter(type, options);\n        var sourceImg = this._getSourceImage();\n        var canvas = this.getCanvas();\n\n        if (!filter) {\n            jqDefer.reject();\n        }\n\n        sourceImg.filters.push(filter);\n\n        this._apply(sourceImg, function() {\n            canvas.renderAll();\n            jqDefer.resolve(type, 'add');\n        });\n\n        return jqDefer;\n    },\n\n    /**\n     * Remove filter to source image\n     * @param {string} type - Filter type\n     * @returns {jQuery.Deferred}\n     */\n    remove: function(type) {\n        var jqDefer = $.Deferred();\n        var sourceImg = this._getSourceImage();\n        var canvas = this.getCanvas();\n\n        if (!sourceImg.filters.length) {\n            jqDefer.reject();\n        }\n\n        sourceImg.filters.pop();\n\n        this._apply(sourceImg, function() {\n            canvas.renderAll();\n            jqDefer.resolve(type, 'remove');\n        });\n\n        return jqDefer;\n    },\n\n    /**\n     * Apply filter\n     * @param {fabric.Image} sourceImg - Source image to apply filter\n     * @param {function} callback - Executed function after applying filter\n     * @private\n     */\n    _apply: function(sourceImg, callback) {\n        sourceImg.applyFilters(callback);\n    },\n\n    /**\n     * Get source image on canvas\n     * @returns {fabric.Image} Current source image on canvas\n     * @private\n     */\n    _getSourceImage: function() {\n        return this.getCanvasImage();\n    },\n\n    /**\n     * Create filter instance\n     * @param {string} type - Filter type\n     * @param {object} [options] - Options of filter\n     * @returns {object} Fabric object of filter\n     * @private\n     */\n    _createFilter: function(type, options) {\n        var filterObj;\n\n        switch (type) {\n            case 'mask':\n                filterObj = new Mask(options);\n                break;\n            default:\n                filterObj = null;\n        }\n\n        return filterObj;\n    }\n});\n\nmodule.exports = Filter;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"