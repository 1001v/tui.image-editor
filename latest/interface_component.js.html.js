tui.util.defineNamespace("fedoc.content", {});
fedoc.content["interface_component.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Component interface\n */\n'use strict';\n\n/**\n * Component interface\n * @class\n */\nvar Component = tui.util.defineClass(/** @lends Component.prototype */{\n    init: function() {},\n\n    /**\n     * Save image(background) of canvas\n     * @param {string} name - Name of image\n     * @param {fabric.Image} oImage - Fabric image instance\n     */\n    setCanvasImage: function(name, oImage) {\n        this.getRoot().setCanvasImage(name, oImage);\n    },\n\n    /**\n     * Returns canvas element of fabric.Canvas[[lower-canvas]]\n     * @returns {HTMLCanvasElement}\n     */\n    getCanvasElement: function() {\n        return this.getRoot().getCanvasElement();\n    },\n\n    /**\n     * Get fabric.Canvas instance\n     * @returns {fabric.Canvas}\n     */\n    getCanvas: function() {\n        return this.getRoot().getCanvas();\n    },\n\n    /**\n     * Get canvasImage (fabric.Image instance)\n     * @returns {fabric.Image}\n     */\n    getCanvasImage: function() {\n        return this.getRoot().getCanvasImage();\n    },\n\n    /**\n     * Get image name\n     * @returns {string}\n     */\n    getImageName: function() {\n        return this.getRoot().getImageName();\n    },\n\n    /**\n     * Get image editor\n     * @returns {ImageEditor}\n     */\n    getEditor: function() {\n        return this.getRoot().getEditor();\n    },\n\n    /**\n     * Return component name\n     * @returns {string}\n     */\n    getName: function() {\n        return this.name;\n    },\n\n    /**\n     * Set image properties\n     * @param {object} setting - Image properties\n     * @param {boolean} [withRendering] - If true, The changed image will be reflected in the canvas\n     */\n    setImageProperties: function(setting, withRendering) {\n        this.getRoot().setImageProperties(setting, withRendering);\n    },\n\n    /**\n     * Set canvas dimension - css only\n     * @param {object} dimension - Canvas css dimension\n     */\n    setCanvasCssDimension: function(dimension) {\n        this.getRoot().setCanvasCssDimension(dimension);\n    },\n\n    /**\n     * Set canvas dimension - css only\n     * @param {object} dimension - Canvas backstore dimension\n     */\n    setCanvasBackstoreDimension: function(dimension) {\n        this.getRoot().setCanvasBackstoreDimension(dimension);\n    },\n\n    /**\n     * Set parent\n     * @param {Component|null} parent - Parent\n     */\n    setParent: function(parent) {\n        this._parent = parent || null;\n    },\n\n    /**\n     * Adjust canvas dimension with scaling image\n     */\n    adjustCanvasDimension: function() {\n        this.getRoot().adjustCanvasDimension();\n    },\n\n    /**\n     * Return parent.\n     * If the view is root, return null\n     * @returns {Component|null}\n     */\n    getParent: function() {\n        return this._parent;\n    },\n\n    /**\n     * Return root\n     * @returns {Component}\n     */\n    getRoot: function() {\n        var next = this.getParent();\n        var current = this; // eslint-disable-line consistent-this\n\n        while (next) {\n            current = next;\n            next = current.getParent();\n        }\n\n        return current;\n    }\n});\n\nmodule.exports = Component;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"