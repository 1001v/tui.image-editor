tui.util.defineNamespace("fedoc.content", {});
fedoc.content["component_main.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Main component having canvas &amp; image, set css-max-dimension of canvas\n */\n'use strict';\n\nvar Component = require('../interface/component');\nvar consts = require('../consts');\n\nvar DEFAULT_CSS_MAX_WIDTH = 1000;\nvar DEFAULT_CSS_MAX_HEIGHT = 800;\n\nvar cssOnly = {\n    cssOnly: true\n};\nvar backstoreOnly = {\n    backstoreOnly: true\n};\n\n/**\n * Main component\n * @extends {Component}\n * @class\n */\nvar Main = tui.util.defineClass(Component, /** @lends Main.prototype */{\n    init: function() {\n        /**\n         * Fabric canvas instance\n         * @type {fabric.Canvas}\n         */\n        this.canvas = null;\n\n        /**\n         * Fabric image instance\n         * @type {fabric.Image}\n         */\n        this.canvasImage = null;\n\n        /**\n         * Max width of canvas elements\n         * @type {number}\n         */\n        this.cssMaxWidth = DEFAULT_CSS_MAX_WIDTH;\n\n        /**\n         * Max height of canvas elements\n         * @type {number}\n         */\n        this.cssMaxHeight = DEFAULT_CSS_MAX_HEIGHT;\n\n        /**\n         * Image name\n         * @type {string}\n         */\n        this.imageName = '';\n    },\n\n    /**\n     * Component name\n     * @type {string}\n     */\n    name: consts.componentNames.MAIN,\n\n    /**\n     * To data url from canvas\n     * @param {string} type - A DOMString indicating the image format. The default type is image/png.\n     * @returns {string} A DOMString containing the requested data URI.\n     */\n    toDataURL: function(type) {\n        return this.canvas &amp;&amp; this.canvas.toDataURL(type);\n    },\n\n    /**\n     * Save image(background) of canvas\n     * @param {string} name - Name of image\n     * @param {?fabric.Image} canvasImage - Fabric image instance\n     * @override\n     */\n    setCanvasImage: function(name, canvasImage) {\n        if (canvasImage) {\n            tui.util.stamp(canvasImage);\n        }\n        this.imageName = name;\n        this.canvasImage = canvasImage;\n    },\n\n    /**\n     * Set css max dimension\n     * @param {{width: number, height: number}} maxDimension - Max width &amp; Max height\n     */\n    setCssMaxDimension: function(maxDimension) {\n        this.cssMaxWidth = maxDimension.width || this.cssMaxWidth;\n        this.cssMaxHeight = maxDimension.height || this.cssMaxHeight;\n    },\n\n    /**\n     * Set canvas element to fabric.Canvas\n     * @param {jQuery|Element|string} canvasElement - Canvas element or selector\n     * @override\n     */\n    setCanvasElement: function(canvasElement) {\n        this.canvas = new fabric.Canvas($(canvasElement)[0], {\n            containerClass: 'tui-image-editor-canvas-container'\n        });\n    },\n\n    /**\n     * Adjust canvas dimension with scaling image\n     */\n    adjustCanvasDimension: function() {\n        var canvasImage = this.canvasImage.scale(1);\n        var boundingRect = canvasImage.getBoundingRect();\n        var width = boundingRect.width;\n        var height = boundingRect.height;\n        var maxDimension = this._calcMaxDimension(width, height);\n\n        this.setCanvasCssDimension({\n            width: '100%',\n            height: '100%', // Set height '' for IE9\n            'max-width': maxDimension.width + 'px',\n            'max-height': maxDimension.height + 'px'\n        });\n        this.setCanvasBackstoreDimension({\n            width: width,\n            height: height\n        });\n        this.canvas.centerObject(canvasImage);\n    },\n\n    /**\n     * Calculate max dimension of canvas\n     * The css-max dimension is dynamically decided with maintaining image ratio\n     * The css-max dimension is lower than canvas dimension (attribute of canvas, not css)\n     * @param {number} width - Canvas width\n     * @param {number} height - Canvas height\n     * @returns {{width: number, height: number}} - Max width &amp; Max height\n     * @private\n     */\n    _calcMaxDimension: function(width, height) {\n        var wScaleFactor = this.cssMaxWidth / width;\n        var hScaleFactor = this.cssMaxHeight / height;\n        var cssMaxWidth = Math.min(width, this.cssMaxWidth);\n        var cssMaxHeight = Math.min(height, this.cssMaxHeight);\n\n        if (wScaleFactor &lt; 1 &amp;&amp; wScaleFactor &lt; hScaleFactor) {\n            cssMaxWidth = width * wScaleFactor;\n            cssMaxHeight = height * wScaleFactor;\n        } else if (hScaleFactor &lt; 1 &amp;&amp; hScaleFactor &lt; wScaleFactor) {\n            cssMaxWidth = width * hScaleFactor;\n            cssMaxHeight = height * hScaleFactor;\n        }\n\n        return {\n            width: Math.floor(cssMaxWidth),\n            height: Math.floor(cssMaxHeight)\n        };\n    },\n\n    /**\n     * Set canvas dimension - css only\n     *  {@link http://fabricjs.com/docs/fabric.Canvas.html#setDimensions}\n     * @param {object} dimension - Canvas css dimension\n     * @override\n     */\n    setCanvasCssDimension: function(dimension) {\n        this.canvas.setDimensions(dimension, cssOnly);\n    },\n\n    /**\n     * Set canvas dimension - backstore only\n     *  {@link http://fabricjs.com/docs/fabric.Canvas.html#setDimensions}\n     * @param {object} dimension - Canvas backstore dimension\n     * @override\n     */\n    setCanvasBackstoreDimension: function(dimension) {\n        this.canvas.setDimensions(dimension, backstoreOnly);\n    },\n\n    /**\n     * Set image properties\n     * {@link http://fabricjs.com/docs/fabric.Image.html#set}\n     * @param {object} setting - Image properties\n     * @param {boolean} [withRendering] - If true, The changed image will be reflected in the canvas\n     * @override\n     */\n    setImageProperties: function(setting, withRendering) {\n        var canvasImage = this.canvasImage;\n\n        if (!canvasImage) {\n            return;\n        }\n\n        canvasImage.set(setting).setCoords();\n        if (withRendering) {\n            this.canvas.renderAll();\n        }\n    },\n\n    /**\n     * Returns canvas element of fabric.Canvas[[lower-canvas]]\n     * @returns {HTMLCanvasElement}\n     * @override\n     */\n    getCanvasElement: function() {\n        return this.canvas.getElement();\n    },\n\n    /**\n     * Get fabric.Canvas instance\n     * @override\n     * @returns {fabric.Canvas}\n     */\n    getCanvas: function() {\n        return this.canvas;\n    },\n\n    /**\n     * Get canvasImage (fabric.Image instance)\n     * @override\n     * @returns {fabric.Image}\n     */\n    getCanvasImage: function() {\n        return this.canvasImage;\n    },\n\n    /**\n     * Get image name\n     * @override\n     * @returns {string}\n     */\n    getImageName: function() {\n        return this.imageName;\n    }\n});\n\nmodule.exports = Main;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"