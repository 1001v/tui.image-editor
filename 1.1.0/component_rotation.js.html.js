tui.util.defineNamespace("fedoc.content", {});
fedoc.content["component_rotation.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Image rotation module\n */\n'use strict';\n\nvar Component = require('../interface/Component');\nvar consts = require('../consts');\n\n/**\n * Image Rotation component\n * @class Rotation\n * @extends {Component}\n * @param {Component} parent - parent component\n */\nvar Rotation = tui.util.defineClass(Component, /** @lends Rotation.prototype */ {\n    init: function(parent) {\n        this.setParent(parent);\n    },\n\n    /**\n     * Component name\n     * @type {string}\n     */\n    name: consts.componentNames.ROTATION,\n\n    /**\n     * Get current angle\n     * @returns {Number}\n     */\n    getCurrentAngle: function() {\n        return this.getCanvasImage().angle;\n    },\n\n    /**\n     * Set angle of the image\n     *\n     *  Do not call \"this.setImageProperties\" for setting angle directly.\n     *  Before setting angle, The originX,Y of image should be set to center.\n     *      See \"http://fabricjs.com/docs/fabric.Object.html#setAngle\"\n     *\n     * @param {number} angle - Angle value\n     * @returns {jQuery.Deferred}\n     */\n    setAngle: function(angle) {\n        var oldAngle = this.getCurrentAngle() % 360; //The angle is lower than 2*PI(===360 degrees)\n        var jqDefer = $.Deferred();\n        var oldImageCenter, newImageCenter, canvasImage;\n\n        angle %= 360;\n        if (angle === oldAngle) {\n            return jqDefer.reject();\n        }\n        canvasImage = this.getCanvasImage();\n\n        oldImageCenter = canvasImage.getCenterPoint();\n        canvasImage.setAngle(angle).setCoords();\n        this.adjustCanvasDimension();\n        newImageCenter = canvasImage.getCenterPoint();\n        this._rotateForEachObject(oldImageCenter, newImageCenter, angle - oldAngle);\n\n        return jqDefer.resolve(angle);\n    },\n\n    /**\n     * Rotate for each object\n     * @param {fabric.Point} oldImageCenter - Image center point before rotation\n     * @param {fabric.Point} newImageCenter - Image center point after rotation\n     * @param {number} angleDiff - Image angle difference after rotation\n     * @private\n     */\n    _rotateForEachObject: function(oldImageCenter, newImageCenter, angleDiff) {\n        var canvas = this.getCanvas();\n        var centerDiff = {\n            x: oldImageCenter.x - newImageCenter.x,\n            y: oldImageCenter.y - newImageCenter.y\n        };\n\n        canvas.forEachObject(function(obj) {\n            var objCenter = obj.getCenterPoint();\n            var radian = fabric.util.degreesToRadians(angleDiff);\n            var newObjCenter = fabric.util.rotatePoint(objCenter, oldImageCenter, radian);\n\n            obj.set({\n                left: newObjCenter.x - centerDiff.x,\n                top: newObjCenter.y - centerDiff.y,\n                angle: (obj.angle + angleDiff) % 360\n            });\n            obj.setCoords();\n        });\n        canvas.renderAll();\n    },\n\n    /**\n     * Rotate the image\n     * @param {number} additionalAngle - Additional angle\n     * @returns {jQuery.Deferred}\n     */\n    rotate: function(additionalAngle) {\n        var current = this.getCurrentAngle();\n\n        return this.setAngle(current + additionalAngle);\n    }\n});\n\nmodule.exports = Rotation;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"