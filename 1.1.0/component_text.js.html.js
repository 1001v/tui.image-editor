tui.util.defineNamespace("fedoc.content", {});
fedoc.content["component_text.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n * @fileoverview Text module\n */\n'use strict';\n\nvar Component = require('../interface/component');\nvar consts = require('../consts');\n\nvar defaultStyles = {\n    fill: '#000000',\n    left: 0,\n    top: 0,\n    padding: 20\n};\nvar resetStyles = {\n    fill: '#000000',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    textAlign: 'left',\n    textDecoraiton: ''\n};\n\n/**\n * Text\n * @class Text\n * @param {Component} parent - parent component\n * @extends {Component}\n */\nvar Text = tui.util.defineClass(Component, /** @lends Text.prototype */{\n    init: function(parent) {\n        this.setParent(parent);\n\n        /**\n         * Default text style\n         * @type {object}\n         */\n        this._defaultStyles = defaultStyles;\n    },\n\n    /**\n     * Component name\n     * @type {string}\n     */\n    name: consts.componentNames.TEXT,\n\n    /**\n     * Add new text on canvas image\n     * @param {string} text - Initial input text\n     * @param {object} options - Options for generating text\n     *     @param {object} [options.styles] Initial styles\n     *         @param {string} [options.styles.fill] Color\n     *         @param {string} [options.styles.fontFamily] Font type for text\n     *         @param {number} [options.styles.fontSize] Size\n     *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)\n     *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)\n     *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)\n     *     @param {{x: number, y: number}} [options.position] - Initial position\n     */\n    add: function(text, options) {\n        var canvas = this.getCanvas();\n        var styles = this._defaultStyles;\n        var newText;\n\n        if (options.styles) {\n            styles = tui.util.extend(options.styles, styles);\n        }\n\n        this._setInitPos(options.position);\n\n        newText = new fabric.Text(text, styles);\n\n        newText.set(consts.fObjectOptions.SELECTION_STYLE);\n\n        canvas.add(newText);\n\n        if (!canvas.getActiveObject()) {\n            canvas.setActiveObject(newText);\n        }\n    },\n\n    /**\n     * Change text of activate object on canvas image\n     * @param {object} activeObj - Current selected text object\n     * @param {string} text - Chaging text\n     */\n    change: function(activeObj, text) {\n        activeObj.set('text', text);\n\n        this.getCanvas().renderAll();\n    },\n\n    /**\n     * Set style\n     * @param {object} activeObj - Current selected text object\n     * @param {object} styleObj - Initial styles\n     *     @param {string} [styleObj.fill] Color\n     *     @param {string} [styleObj.fontFamily] Font type for text\n     *     @param {number} [styleObj.fontSize] Size\n     *     @param {string} [styleObj.fontStyle] Type of inclination (normal / italic)\n     *     @param {string} [styleObj.fontWeight] Type of thicker or thinner looking (normal / bold)\n     *     @param {string} [styleObj.textAlign] Type of text align (left / center / right)\n     *     @param {string} [styleObj.textDecoraiton] Type of line (underline / line-throgh / overline)\n     */\n    setStyle: function(activeObj, styleObj) {\n        tui.util.forEach(styleObj, function(val, key) {\n            if (activeObj[key] === val) {\n                styleObj[key] = resetStyles[key] || '';\n            }\n        }, this);\n\n        activeObj.set(styleObj);\n\n        this.getCanvas().renderAll();\n    },\n\n    /**\n     * Set initial position on canvas image\n     * @param {{x: number, y: number}} [position] - Selected position\n     */\n    _setInitPos: function(position) {\n        position = position || this.getCanvasImage().getCenterPoint();\n\n        this._defaultStyles.left = position.x;\n        this._defaultStyles.top = position.y;\n    }\n});\n\nmodule.exports = Text;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"